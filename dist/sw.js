const CACHE_NAME="camcordity-v1",urlsToCache=["/","/assets/fonts/fonts.css","/assets/fonts/Satoshi-Medium.ttf","/assets/fonts/Satoshi-Bold.ttf","/assets/logo.svg","/assets/logo-text.svg","/assets/icon-34.png","/assets/icon-128.png"];async function uploadPendingRecordings(){console.log("Background sync: uploading pending recordings")}self.addEventListener("install",e=>{e.waitUntil(caches.open(CACHE_NAME).then(e=>(console.log("Opened cache"),e.addAll(urlsToCache)))),self.skipWaiting()}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==CACHE_NAME)return console.log("Deleting old cache:",e),caches.delete(e)})))),self.clients.claim()}),self.addEventListener("fetch",e=>{"GET"===e.request.method&&e.request.url.startsWith("http")&&e.respondWith(caches.match(e.request).then(t=>{if(t)return t;const s=e.request.clone();return fetch(s).then(t=>{if(!t||200!==t.status||"basic"!==t.type)return t;const s=t.clone();return caches.open(CACHE_NAME).then(t=>{e.request.url.startsWith(self.location.origin)&&t.put(e.request,s)}),t}).catch(t=>{if(console.log("Fetch failed:",t),"document"===e.request.destination)return caches.match("/");throw t})}))}),self.addEventListener("message",e=>{const{type:t,data:s}=e.data;switch(t){case"SKIP_WAITING":self.skipWaiting();break;case"GET_VERSION":e.ports[0].postMessage({version:CACHE_NAME});break;case"CLEAR_CACHE":caches.delete(CACHE_NAME).then(()=>{e.ports[0].postMessage({success:!0})});break;default:console.log("Unknown message type:",t)}}),self.addEventListener("sync",e=>{"background-upload"===e.tag&&e.waitUntil(uploadPendingRecordings())}),self.addEventListener("push",e=>{if(e.data){const t=e.data.json(),s={body:t.body,icon:"/assets/icon-128.png",badge:"/assets/icon-34.png",data:t.data};e.waitUntil(self.registration.showNotification(t.title,s))}}),self.addEventListener("notificationclick",e=>{e.notification.close(),e.waitUntil(clients.openWindow("/"))});